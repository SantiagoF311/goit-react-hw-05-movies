{"version":3,"file":"static/js/549.78ce1375.chunk.js","mappings":"2NAGMA,EAAU,CACZC,QAAS,CACPC,OAAQ,mBACRC,cAAe,+NAIRC,EAAa,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBAC5BC,EAAG,6CAAyCF,EAAzC,aAETG,EAAAA,EAAAA,YAAU,WACNC,EAAAA,EAAAA,IAAUF,EAAKP,GACdU,MAAK,SAAAC,GAAQ,OAAIL,EAAgBK,EAASC,KAA7B,IACbC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAM,gCAAiCA,EAAnD,GACb,GAAE,CAACP,EAAKD,GACV,E,SCUL,EAxBe,WAAO,IAAD,IACTU,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwCE,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBb,EAArB,KAEA,OACI,4BACKS,QAAQK,IAAID,GACZA,IAAgB,UAAAA,EAAaE,eAAb,eAAsBC,QAAS,GAC5C,wBACKH,EAAaE,QAAQE,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAST,EAApB,EAAoBA,GAApB,OACtB,2BACI,qCAAaQ,MACb,uBAAIC,MAFCT,EADa,OAQ9B,uBAAsC,KAAtB,OAAZG,QAAY,IAAZA,GAAA,UAAAA,EAAcE,eAAd,eAAuBC,QAAe,uCAAsC,gBAEpF,SAAClB,EAAD,CAAYE,gBAAiBA,EAAiBD,QAASW,MAGlE,C","sources":["Api/ReviewsApi.jsx","components/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nimport { useEffect } from 'react';\n\nconst options = {\n    headers: {\n      accept: 'application/json',\n      Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzNWZiNWI1MmI2NGZkZjQ5NTk2MTRkNmVlNjk2MzY2MSIsInN1YiI6IjY0MmRmOWRmYTZhNGMxMDBmNDJjODBmMSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.dh_81ToGYTWvWLZD2NmIMHPSCDMFiUURjqsMwgAMB-A'\n    }\n};\n\nexport const ReviewsApi = ({ movieId, setMovieReviews}) => {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/reviews`\n\n    useEffect(() => {\n        axios.get(url, options)\n        .then(Response => setMovieReviews(Response.data))\n        .catch(error => console.error('Error fetching movie details:', error));\n      }, [url, setMovieReviews]);\n    }\n\n    ","import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReviewsApi } from 'Api/ReviewsApi';\n\nconst Review = () => {\n    const { id } = useParams();\n    const [movieReviews, setMovieReviews] = useState(null);\n\n    return (\n        <main>\n            {console.log(movieReviews)}\n            {movieReviews && movieReviews.results?.length > 0 ? (\n                <ul>\n                    {movieReviews.results.map(({ author, content, id }) => (\n                        <li key={id}>\n                            <h3>Author: {author}</h3>\n                            <p>{content}</p>\n                        </li>\n                    ))}\n                </ul>\n            ) : (\n                <p>{movieReviews?.results?.length === 0 ? 'No hay reviews para esta pel√≠cula' : 'Loading...'}</p>\n            )}\n            <ReviewsApi setMovieReviews={setMovieReviews} movieId={id} />\n        </main>\n    );\n};\n\nexport default Review;\n"],"names":["options","headers","accept","Authorization","ReviewsApi","movieId","setMovieReviews","url","useEffect","axios","then","Response","data","catch","error","console","id","useParams","useState","movieReviews","log","results","length","map","author","content"],"sourceRoot":""}